# script for stm32mp15x family with companion PMIC STPMU1

source [find target/stm32mp15x.cfg]

$_CHIPNAME.cpu0 configure -event reset-halt { catch { pmic_init }}

# Wait for expression to be true with a timeout of 200ms
proc wait_state {condition} {
	for {set t 0} {$t < 200} {incr t} {
		if {[uplevel 1 $condition] == 0} {
			return
		}
		sleep 1
	}
	return -code 1 "Timed out"
}

proc mrw_phys {reg} {
	set value ""
	mem2array value 32 $reg 1 phys
	return $value(0)
}

proc mmw_phys {reg setbits clearbits} {
	set old [mrw_phys $reg]
	set new [expr ($old & ~$clearbits) | $setbits]
	mww phys $reg $new
}

# Set mask_reset bits in PMIC to keep all powers on at next reset event
# Only the mask_reset of SD-card power is not enabled to guarantee boot from SD
# This procedure requires Secure memory access
proc pmic_init {} {
	global _CHIPNAME

	targets $_CHIPNAME.cpu0
	$_CHIPNAME.dap apsel 0

	set RCC_BASE   0x50000000
	set GPIO_BASE  0x54004000
	set I2C_BASE   0x5c002000

	# i2c @ 100kHz, rise 100ns, fall 100ns
	# timing depending from HSIDIV[1:0] = {0 1 2 3} means hsi_ker_ck = {64 32 16 8} MHz
	set I2C_TIMING {0x10b17db5 0x00b07cb4 0x00503d58 0x00201d2b}

	mww phys [expr $RCC_BASE + 0x00c] 1; # set HSION = 1 (enable HSI)
	mww phys [expr $RCC_BASE + 0x0c0] 2; # set I2C46SRC[2:0] = 2 (hsi_ker_ck)

	mww phys [expr $RCC_BASE + 0x208] 4; # set I2C4EN = 1
	mww phys [expr $RCC_BASE + 0x188] 4; # assert I2C4RST
	mww phys [expr $RCC_BASE + 0x18c] 4; # deassert I2C4RST

	mww phys [expr $RCC_BASE + 0x210] 1; # set GPIOZEN = 1 (enable GPIOZ)
	mmw_phys [expr $GPIO_BASE + 0x00] 0x00000a00 0x00000f00; # GPIOZ4/5 AF
	mmw_phys [expr $GPIO_BASE + 0x04] 0x00000030 0x00000000; # GPIOZ4/5 open drain
	mmw_phys [expr $GPIO_BASE + 0x08] 0x00000000 0x00000f00; # GPIOZ4/5 low speed
	mmw_phys [expr $GPIO_BASE + 0x0c] 0x00000000 0x00000f00; # GPIOZ4/5 no pull-up/down
	mmw_phys [expr $GPIO_BASE + 0x20] 0x00660000 0x00ff0000; # GPIOZ4/5 AF6

	set hsidiv [expr [mrw_phys [expr $RCC_BASE + 0x018]] & 0x3]
	mww phys [expr $I2C_BASE + 0x010] [lindex $I2C_TIMING $hsidiv]
	mww phys [expr $I2C_BASE + 0x000] 1; # set PE = 1
	mww phys [expr $I2C_BASE + 0x004] 0x02043066
	wait_state {expr {([mrw_phys [expr $I2C_BASE + 0x018]] & 0x00000002) == 0}}; # wait TXIS
	mww phys [expr $I2C_BASE + 0x028] 0x18
	wait_state {expr {([mrw_phys [expr $I2C_BASE + 0x018]] & 0x00000002) == 0}}; # wait TXIS
	mww phys [expr $I2C_BASE + 0x028] 0x0f
	wait_state {expr {([mrw_phys [expr $I2C_BASE + 0x018]] & 0x00000002) == 0}}; # wait TXIS
	mww phys [expr $I2C_BASE + 0x028] 0x00
	wait_state {expr {([mrw_phys [expr $I2C_BASE + 0x018]] & 0x00000002) == 0}}; # wait TXIS
	mww phys [expr $I2C_BASE + 0x028] 0x6f
	wait_state {expr {([mrw_phys [expr $I2C_BASE + 0x018]] & 0x00000020) == 0}}; # wait STOPF
	mww phys [expr $I2C_BASE + 0x01c] 0x00000020
	mww phys [expr $I2C_BASE + 0x004] 0x01ff14fe

#	mww phys [expr $RCC_BASE + 0x20c] 4; # set I2C4EN = 0 (disable I2C4)
#	mww phys [expr $RCC_BASE + 0x214] 1; # set GPIOZEN = 0 (disable GPIOZ)
}

# Set bit 16 in TAMP_BACKUP_REGISTER(20) to signal to SPL and TF-A that we
# are in a debug session. This will force them (at next reboot) to program
# the PMIC for keeping powered-on the debug unit during reset.
proc set_pmic_in_backup_reg {} {
	global _CHIPNAME

	targets $_CHIPNAME.cpu0
	$_CHIPNAME.dap apsel 0

	mmw_phys 0x5c00a150 0x00010000 0x00000000
}

proc clear_pmic_in_backup_reg {} {
	global _CHIPNAME

	targets $_CHIPNAME.cpu0
	$_CHIPNAME.dap apsel 0

	mmw_phys 0x5c00a150 0x00000000 0x00010000
}

# Wrap around init/shutdown. Attention: CTRL-C will not invoke shutdown
rename init _init
proc init {} {
	_init
#	set_pmic_in_backup_reg
}

rename shutdown _shutdown
proc shutdown {} {
	clear_pmic_in_backup_reg
	_shutdown
}
