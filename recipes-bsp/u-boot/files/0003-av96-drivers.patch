diff -Naurw ./arch/arm/lib/relocate.S ../uboot-source/arch/arm/lib/relocate.S
--- ./arch/arm/lib/relocate.S	2018-11-14 17:10:06.000000000 +0100
+++ ../uboot-source/arch/arm/lib/relocate.S	2020-05-15 17:33:17.417552813 +0200
@@ -78,6 +78,8 @@
  */
 
 ENTRY(relocate_code)
+	/* b	relocate_code */
+
 	ldr	r1, =__image_copy_start	/* r1 <- SRC &__image_copy_start */
 	subs	r4, r0, r1		/* r4 <- relocation offset */
 	beq	relocate_done		/* skip relocation */
diff -Naurw ./arch/arm/mach-stm32mp/cpu.c ../uboot-source/arch/arm/mach-stm32mp/cpu.c
--- ./arch/arm/mach-stm32mp/cpu.c	2020-05-15 17:31:41.449287745 +0200
+++ ../uboot-source/arch/arm/mach-stm32mp/cpu.c	2020-05-15 17:33:17.441551876 +0200
@@ -16,6 +16,7 @@
 #include <dm/lists.h>
 #include <dm/uclass.h>
 #include <dt-bindings/clock/stm32mp1-clks.h>
+#include <i2c_eeprom.h>
 
 /* RCC register */
 #define RCC_TZCR		(STM32_RCC_BASE + 0x00)
@@ -83,6 +84,9 @@
 #define PKG_SHIFT	27
 #define PKG_MASK	GENMASK(2, 0)
 
+/* MAC ADDR offset in MAC EEPROM */
+#define MAC24AA02_MAC_ADDR  0xfa
+
 DECLARE_GLOBAL_DATA_PTR;
 
 #if !defined(CONFIG_SPL) || defined(CONFIG_SPL_BUILD)
@@ -473,10 +477,9 @@
 }
 
 /*
- * If there is no MAC address in the environment, then it will be initialized
- * (silently) from the value in the OTP.
+ * initialize MAC address from the value in the OTP
  */
-static int setup_mac_address(void)
+static int setup_mac_address_otp(void)
 {
 #if defined(CONFIG_NET)
 	int ret;
@@ -501,7 +504,7 @@
 		enetaddr[i] = ((uint8_t *)&otp)[i];
 
 	if (!is_valid_ethaddr(enetaddr)) {
-		pr_err("invalid MAC address in OTP %pM", enetaddr);
+		pr_debug("invalid MAC address in OTP %pM", enetaddr);
 		return -EINVAL;
 	}
 
@@ -516,6 +519,44 @@
 	return 0;
 }
 
+/*
+ * If there is no MAC address in the environment, then it will be initialized
+ * (silently) from the value in the MAC EEPROM.
+ */
+static int setup_mac_address_i2c(void)
+{
+#if defined(CONFIG_NET)
+	uchar ethaddr[6];
+	struct udevice *dev;
+	int ret;
+
+	if (eth_env_get_enetaddr("ethaddr", ethaddr))
+		return 0;
+
+	ret = uclass_first_device_err(UCLASS_I2C_EEPROM, &dev);
+	if (ret) {
+		pr_debug( "invalid MAC address in OTP\n" );
+		pr_err( "MAC EEPROM not found\n" );
+		return ret;
+	}
+
+	ret = i2c_eeprom_read(dev, MAC24AA02_MAC_ADDR, ethaddr, 6);
+	if (ret) {
+		pr_debug( "invalid MAC address in OTP\n" );
+		pr_err( "Failed to read MAC EEPROM\n" );
+		return ret;
+	}
+
+	if (is_valid_ethaddr(ethaddr))
+		eth_env_set_enetaddr("ethaddr", ethaddr);
+	else {
+		pr_err("invalid MAC address in OTP and in MAC EEPROM %pM\n", ethaddr);
+		return -EINVAL;
+	}
+#endif
+	return 0;
+}
+
 static int setup_serial_number(void)
 {
 	char serial_string[25];
@@ -596,7 +637,8 @@
 {
 	watchdog_start();
 	setup_boot_mode();
-	setup_mac_address();
+	if ( setup_mac_address_otp() )
+	  setup_mac_address_i2c();
 	setup_serial_number();
 
 	return 0;
diff -Naurw ./board/st/stm32mp1/stm32mp1.c ../uboot-source/board/st/stm32mp1/stm32mp1.c
--- ./board/st/stm32mp1/stm32mp1.c	2020-05-15 17:31:41.641280302 +0200
+++ ../uboot-source/board/st/stm32mp1/stm32mp1.c	2020-05-15 17:33:17.569546879 +0200
@@ -33,6 +33,7 @@
 #include <jffs2/load_kernel.h>
 #include <power/regulator.h>
 #include <usb/dwc2_udc.h>
+#include <fuse.h>
 
 /* SYSCFG registers */
 #define SYSCFG_BOOTR		0x00
@@ -667,9 +668,30 @@
 }
 #endif /* CONFIG_ADC */
 
+/**
+ * we need to program PRODUCT_BELOW_2V5 fuse for enabling high-speed
+ * mode on some pins
+ */
+static int check_product_below_2v5( void )
+{
+	int ret;
+	u32 otp;
+
+	ret = fuse_read( 0, 18, &otp );
+	if ( !ret ) {
+		if ( !( otp & ( 1u << 13 ) ) ) {
+			pr_err( "PRODUCT_BELOW_2V5 fuse not set. Programming ...\n" );
+			ret = fuse_prog( 0, 18, ( 1u << 13 ) );
+			mdelay( 3000 );
+			do_reset(NULL, 0, 0, NULL);
+		}
+	}
+
+	return ret;
+}
+
 static void sysconf_init(void)
 {
-#ifndef CONFIG_STM32MP1_TRUSTED
 	u8 *syscfg;
 #ifdef CONFIG_DM_REGULATOR
 	struct udevice *pwr_dev;
@@ -723,6 +745,12 @@
 			return;
 		}
 
+		ret = check_product_below_2v5( );
+		if (ret) {
+		  pr_err("Reading fuse failed\n");
+		  return;
+		}
+
 		ret = misc_read(dev, STM32_BSEC_SHADOW(18), &otp, 4);
 		if (!ret)
 			otp = otp & BIT(13);
@@ -755,6 +783,8 @@
 		}
 	}
 #endif
+
+#ifndef CONFIG_STM32MP1_TRUSTED
 	debug("[0x%x] SYSCFG.IOCTRLSETR = 0x%08x\n",
 	      (u32)syscfg + SYSCFG_IOCTRLSETR,
 	      readl(syscfg + SYSCFG_IOCTRLSETR));
diff -Naurw ./common/board_f.c ../uboot-source/common/board_f.c
--- ./common/board_f.c	2020-05-15 17:31:41.325292554 +0200
+++ ../uboot-source/common/board_f.c	2020-05-15 17:33:17.601545630 +0200
@@ -36,6 +36,7 @@
 #include <asm/mp.h>
 #endif
 #include <asm/io.h>
+#include <asm/gpio.h>
 #include <asm/sections.h>
 #include <dm/root.h>
 #include <linux/errno.h>
@@ -773,6 +774,56 @@
 	return 0;
 }
 
+/**
+ * check_hw_ver() checks Avenger96 board HW coding
+ * see PD9 and PG13 pins in schematics
+ */
+static int check_hw_ver(void)
+{
+	ofnode node;
+	struct gpio_desc gpio;
+	int dts_av96_ver;
+	unsigned int board_ver = 0u;
+
+	dts_av96_ver = fdtdec_get_config_int(gd->fdt_blob, "dh,avenger96-hwver", -1) & 0xff;
+
+	node = ofnode_path("/config");
+	if (!ofnode_valid(node)) {
+		debug("%s: no /config node?\n", __func__);
+		return EINVAL;
+	}
+
+	if (gpio_request_by_name_nodev(node, "dh,hwver-gpios", 0, &gpio, GPIOD_IS_IN)) {
+		debug("%s: could not find /config/dh,hwver-gpios/0\n", __func__);
+		return EINVAL;
+	}
+
+	if (dm_gpio_get_value(&gpio))
+		board_ver |= 0x01u;
+
+	dm_gpio_free(NULL, &gpio);
+
+
+	if (gpio_request_by_name_nodev(node, "dh,hwver-gpios", 1, &gpio, GPIOD_IS_IN)) {
+		debug("%s: could not find /config/dh,hwver-gpios/1\n", __func__);
+		return EINVAL;
+	}
+
+	if (dm_gpio_get_value(&gpio))
+		board_ver |= 0x02u;
+
+	dm_gpio_free(NULL, &gpio);
+
+	if ( board_ver != dts_av96_ver ) {
+		printf( "\n********************************************\n" );
+		printf( "* HW coding should be 0x%02x, detected: 0x%02x *\n", dts_av96_ver, (int )board_ver );
+		printf( "********************************************\n\n" );
+		mdelay( 10000 );
+	}
+
+	return 0;
+}
+
 static const init_fnc_t init_sequence_f[] = {
 	setup_mon_len,
 #ifdef CONFIG_OF_CONTROL
@@ -825,6 +876,7 @@
 #endif
 #if defined(CONFIG_DISPLAY_BOARDINFO)
 	show_board_info,
+	check_hw_ver,
 #endif
 	INIT_FUNC_WATCHDOG_INIT
 #if defined(CONFIG_MISC_INIT_F)
diff -Naurw ./common/board_r.c ../uboot-source/common/board_r.c
--- ./common/board_r.c	2018-11-14 17:10:06.000000000 +0100
+++ ../uboot-source/common/board_r.c	2020-05-15 17:33:17.601545630 +0200
@@ -746,12 +746,16 @@
 #ifdef CONFIG_PPC
 	initr_spi,
 #endif
+
+#if 0
 #ifdef CONFIG_CMD_NAND
 	initr_nand,
 #endif
 #ifdef CONFIG_CMD_ONENAND
 	initr_onenand,
 #endif
+#endif
+
 #ifdef CONFIG_MMC
 	initr_mmc,
 #endif
@@ -815,10 +819,12 @@
 #ifdef CONFIG_BITBANGMII
 	initr_bbmii,
 #endif
+
 #ifdef CONFIG_CMD_NET
 	INIT_FUNC_WATCHDOG_RESET
 	initr_net,
 #endif
+
 #ifdef CONFIG_POST
 	initr_post,
 #endif
diff -Naurw ./configs/stm32mp15_basic_defconfig ../uboot-source/configs/stm32mp15_basic_defconfig
--- ./configs/stm32mp15_basic_defconfig	2020-05-15 17:31:41.097301393 +0200
+++ ../uboot-source/configs/stm32mp15_basic_defconfig	2020-05-15 17:33:17.633544380 +0200
@@ -16,6 +16,8 @@
 CONFIG_SPL_MTD_SUPPORT=y
 CONFIG_SPL_POWER_SUPPORT=y
 CONFIG_SYS_PROMPT="STM32MP> "
+CONFIG_MISC=y
+CONFIG_I2C_EEPROM=y
 # CONFIG_CMD_BOOTD is not set
 CONFIG_CMD_DTIMG=y
 # CONFIG_CMD_ELF is not set
@@ -88,6 +90,8 @@
 CONFIG_DM_ETH=y
 CONFIG_DWC_ETH_QOS=y
 CONFIG_PHY=y
+CONFIG_PHY_MICREL=y
+CONFIG_PHY_MICREL_KSZ90X1=y
 CONFIG_PHY_STM32_USBPHYC=y
 CONFIG_PINCONF=y
 # CONFIG_SPL_PINCTRL_FULL is not set
diff -Naurw ./configs/stm32mp15_trusted_defconfig ../uboot-source/configs/stm32mp15_trusted_defconfig
--- ./configs/stm32mp15_trusted_defconfig	2020-05-15 17:31:41.097301393 +0200
+++ ../uboot-source/configs/stm32mp15_trusted_defconfig	2020-05-15 17:33:17.633544380 +0200
@@ -6,6 +6,8 @@
 CONFIG_FIT=y
 CONFIG_BOOTCOMMAND="run bootcmd_stm32mp"
 CONFIG_SYS_PROMPT="STM32MP> "
+CONFIG_MISC=y
+CONFIG_I2C_EEPROM=y
 # CONFIG_CMD_BOOTD is not set
 CONFIG_CMD_DTIMG=y
 # CONFIG_CMD_ELF is not set
@@ -76,6 +78,8 @@
 CONFIG_DM_ETH=y
 CONFIG_DWC_ETH_QOS=y
 CONFIG_PHY=y
+CONFIG_PHY_MICREL=y
+CONFIG_PHY_MICREL_KSZ90X1=y
 CONFIG_PHY_STM32_USBPHYC=y
 CONFIG_PINCONF=y
 CONFIG_PINCTRL_STMFX=y
diff -Naurw ./drivers/net/dwc_eth_qos.c ../uboot-source/drivers/net/dwc_eth_qos.c
--- ./drivers/net/dwc_eth_qos.c	2020-05-15 17:31:42.085263091 +0200
+++ ../uboot-source/drivers/net/dwc_eth_qos.c	2020-05-15 17:33:17.677542661 +0200
@@ -731,11 +731,6 @@
 
 static int eqos_stop_resets_stm32(struct udevice *dev)
 {
-	struct eqos_priv *eqos = dev_get_priv(dev);
-
-	if (dm_gpio_is_valid(&eqos->phy_reset_gpio))
-		dm_gpio_set_value(&eqos->phy_reset_gpio, 1);
-
 	return 0;
 }
 
@@ -1073,7 +1068,7 @@
 	 * don't need to reconnect/reconfigure again
 	 */
 	if (!eqos->phy) {
-		eqos->phy = phy_connect(eqos->mii, 0, dev,
+		eqos->phy = phy_connect(eqos->mii, 7, dev,
 					eqos->config->interface(dev));
 		if (!eqos->phy) {
 			pr_err("phy_connect() failed");
@@ -1611,6 +1606,7 @@
 err_free_clk_slave_bus:
 	clk_free(&eqos->clk_slave_bus);
 err_free_gpio_phy_reset:
+	pr_err("**** dm_gpio_free( phy_reset_gpio )\n" );
 	dm_gpio_free(dev, &eqos->phy_reset_gpio);
 err_free_reset_eqos:
 	reset_free(&eqos->reset_ctl);
@@ -1794,6 +1790,12 @@
 		goto err_remove_resources_core;
 	}
 
+	ret = eqos->config->ops->eqos_start_resets(dev);
+	if (ret < 0) {
+		pr_err("eqos_start_resets() failed: %d", ret);
+		goto err_remove_resources_tegra;
+	}
+
 	eqos->mii = mdio_alloc();
 	if (!eqos->mii) {
 		pr_err("mdio_alloc() failed");
diff -Naurw ./drivers/net/phy/micrel_ksz90x1.c ../uboot-source/drivers/net/phy/micrel_ksz90x1.c
--- ./drivers/net/phy/micrel_ksz90x1.c	2018-11-14 17:10:06.000000000 +0100
+++ ../uboot-source/drivers/net/phy/micrel_ksz90x1.c	2020-05-15 17:33:17.677542661 +0200
@@ -123,7 +123,7 @@
 		} else {
 			changed = 1;	/* Value was changed in OF */
 			/* Calculate the register value and fix corner cases */
-			if (val[i] > ps_to_regval * 0xf) {
+			if (val[i] > ps_to_regval * 0x1f) {
 				max = (1 << ofcfg->grp[i].size) - 1;
 				regval |= max << offset;
 			} else {
@@ -135,6 +135,7 @@
 	if (!changed)
 		return 0;
 
+	/* printf( "ksz90x1 writeext( %i, 0x%04x )\n", (int )ofcfg->reg, (int )regval ); */
 	return drv->writeext(phydev, 0, ofcfg->devad, ofcfg->reg, regval);
 }
 
diff -Naurw ./drivers/net/phy/phy.c ../uboot-source/drivers/net/phy/phy.c
--- ./drivers/net/phy/phy.c	2018-11-14 17:10:06.000000000 +0100
+++ ../uboot-source/drivers/net/phy/phy.c	2020-05-15 17:33:17.677542661 +0200
@@ -737,6 +737,7 @@
 	int i;
 	struct phy_device *phydev;
 
+	mdelay(5);		/* 5 ms */
 	phydev = search_for_existing_phy(bus, phy_mask, interface);
 	if (phydev)
 		return phydev;
diff -Naurw ./include/configs/stm32mp1.h ../uboot-source/include/configs/stm32mp1.h
--- ./include/configs/stm32mp1.h	2020-05-15 17:31:42.353252700 +0200
+++ ../uboot-source/include/configs/stm32mp1.h	2020-05-15 17:33:17.749539850 +0200
@@ -232,7 +232,7 @@
 #else /* CONFIG_STM32MP1_OPTEE */
 
 #define STM32MP_MTDPARTS \
-	"mtdparts_nor0=256k(fsbl1),256k(fsbl2),2m(ssbl),256k(u-boot-env),-(nor_user)\0" \
+	"mtdparts_nor0=256k(fsbl1),256k(fsbl2),1m(ssbl),256k(u-boot-env),-(nor_user)\0" \
 	"mtdparts_nand0=2m(fsbl),2m(ssbl1),2m(ssbl2),-(UBI)\0" \
 	"mtdparts_spi-nand0=2m(fsbl),2m(ssbl1),2m(ssbl2),-(UBI)\0"
 
diff -Naurw ./Makefile ../uboot-source/Makefile
--- ./Makefile	2020-05-15 17:31:42.081263245 +0200
+++ ../uboot-source/Makefile	2020-05-15 17:33:17.709541411 +0200
@@ -254,7 +254,8 @@
 
 HOSTCC       = cc
 HOSTCXX      = c++
-HOSTCFLAGS   = -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer \
+#HOSTCFLAGS   = -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer \
+HOSTCFLAGS   = -Wall -Wstrict-prototypes -g -O1 -fomit-frame-pointer \
 		$(if $(CONFIG_TOOLS_DEBUG),-g)
 HOSTCXXFLAGS = -O2
 
